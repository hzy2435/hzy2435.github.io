<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot 文件上传和下载简单实现</title>
      <link href="/2020/04/18/SpringBoot-File/"/>
      <url>/2020/04/18/SpringBoot-File/</url>
      
        <content type="html"><![CDATA[<p>​        在 Spring Boot 项目，往往有处理文件上传/下载功能的需要，比如图片的上传，附件的上传下载等功能需求。在某次实践过程中，打算将本次的文件上传下载留作记录，故整理本文以备后面项目参考。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>本次实践中，为了保存文件的原始文件名记录，同时为了防止文件夹中出现多个同名文件，所以需要一个表来存放原文件名和自定义文件名的关系。</p><h3 id="创建资源表"><a href="#创建资源表" class="headerlink" title="创建资源表"></a>创建资源表</h3><p>创建 sys_resource 表来映射文件名和自定义文件名的关联关系，同时记录创建者的信息及创建时间，sql 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`sys_resource`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_resource`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户 id'</span>,</span><br><span class="line">  <span class="string">`origin_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'源id'</span>,</span><br><span class="line">  <span class="string">`origin_type`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'源类型(课程/问题/评论)'</span>,</span><br><span class="line">  <span class="string">`resource_type`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'资源类型(文件/图片/视频)'</span>,</span><br><span class="line">  <span class="string">`resource_old_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'资源原始文件名'</span>,</span><br><span class="line">  <span class="string">`resource_new_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'资源系统生成文件名'</span>,</span><br><span class="line">  <span class="string">`create_date`</span> datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建日期'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_general_ci <span class="keyword">COMMENT</span> = <span class="string">'资源表'</span> ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure><h3 id="创建相应的-Java-Bean"><a href="#创建相应的-Java-Bean" class="headerlink" title="创建相应的 Java Bean"></a>创建相应的 Java Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 资源表</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> len</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@ApiModel</span>(value=<span class="string">"SysResource对象"</span>, description=<span class="string">"资源表"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysResource</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"源id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long originId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"源类型(课程/问题/评论)"</span>)</span><br><span class="line">    <span class="keyword">private</span> String originType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"资源类型(文件/图片/视频)"</span>)</span><br><span class="line">    <span class="keyword">private</span> String resourceType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"资源系统生成文件名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String resourceNewName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"资源原始文件名"</span>)</span><br><span class="line">    <span class="keyword">private</span> String resourceOldName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"创建日期"</span>)</span><br><span class="line">    <span class="meta">@JSONField</span>(format = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置相应的文件存放路径"><a href="#配置相应的文件存放路径" class="headerlink" title="配置相应的文件存放路径"></a>配置相应的文件存放路径</h3><p>需要将上传的图片等资源保存到指定的路径下，为此，在 <code>application.yml</code> 配置文件的路径，我本地的路径如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">basePath:</span> <span class="string">D:/Graduration/resources/</span></span><br></pre></td></tr></table></figure><p>接着，在控制器中注入配置的环境变量，以我项目的为示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/resource/sys-resource"</span>)</span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"/resource/sys-resource"</span>, tags = <span class="string">"系统资源"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysResourceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;resources.basePath&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String baseDir;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可能需要注意，在使用 <code>@Value</code> 注入属性时，所在的类需要是 <code>Spring</code> 容器中管理的 <code>Bean</code>，所以需要先将类交由 <code>Spring</code> 容器管理，这里通过添加 <code>@RestController</code> 注解实现。<code>@RestController</code> 注解主要是指明该类是一个控制器类，负责接收请求，同时 <code>Rest</code> 表示该接口的所有请求返回的数据都将直接返回给前端，而不再是跳转的页面。</p><p>至此，相关的环境已经准备完毕。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/resource/sys-resource"</span>)</span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"/resource/sys-resource"</span>, tags = <span class="string">"系统资源"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysResourceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;resources.basePath&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String baseDir;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/file/upload"</span>)</span><br><span class="line">  <span class="meta">@RequiresRoles</span>(<span class="string">"teacher"</span>)</span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"上传课程文件"</span>, notes = <span class="string">"文件"</span>, response = ResponseEntity<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">uploadFile</span>(<span class="title">MultipartFile</span> <span class="title">file</span>, <span class="title">Long</span> <span class="title">originId</span>, <span class="title">Integer</span> <span class="title">originType</span>) <span class="title">throws</span> <span class="title">BaseException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (originId == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(ResponseEntity.ResponseCode.ERROR.getCode(), <span class="string">"资源id不能为空"</span>);</span><br><span class="line">    <span class="keyword">if</span> (originType == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(ResponseEntity.ResponseCode.ERROR.getCode(), <span class="string">"资源类型不能为空"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建资源映射对象</span></span><br><span class="line">    SysResource sysResource = <span class="keyword">new</span> SysResource();</span><br><span class="line">    <span class="comment">// 获取登录用户的 id (PS: 这是因为我的项目使用了 Shiro)</span></span><br><span class="line">    sysResource.setUserId(((SysUser) SecurityUtils.getSubject().getPrincipal()).getId());</span><br><span class="line">    sysResource.setOriginId(originId);</span><br><span class="line">    <span class="comment">// 项目使用枚举来识别源类型：COMMENT(1, "评论"), QUESTION(2, "问题"), COURSE(3, "课程");</span></span><br><span class="line">    sysResource.setOriginType(EnumUtil.obj2Enum(SysResourceEnum.OriginType.class, "getCode", originType).toString());</span><br><span class="line">    <span class="comment">// 项目使用枚举来识别文件类型：PICTURE(1, "图片"), VIDEO(2, "视频"), File(3, "文件");</span></span><br><span class="line">    sysResource.setResourceType(SysResourceEnum.ResourceType.File.toString());</span><br><span class="line">    <span class="comment">// 保存文件原始文件名</span></span><br><span class="line">    sysResource.setResourceOldName(file.getOriginalFilename());</span><br><span class="line">    <span class="comment">// 调用函数保存文件，并将系统生成的文件名存放起来</span></span><br><span class="line">    sysResource.setResourceNewName(saveFile(filePath, file));</span><br><span class="line">    sysResource.setCreateDate(LocalDateTime.now());</span><br><span class="line">    <span class="comment">// 调用 Service 保存文件上传记录</span></span><br><span class="line">    <span class="keyword">if</span> (sysResourceService.save(sysResource)) <span class="keyword">return</span> ResponseUtil.success(sysResource, <span class="string">"上传成功"</span>);</span><br><span class="line">    <span class="keyword">return</span> ResponseUtil.error(<span class="string">"上传失败"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 该方法负责保存文件到系统中并返回系统生成的文件名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">saveFile</span><span class="params">(String baseFolder, MultipartFile file)</span> <span class="keyword">throws</span> BaseException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1. 获取文件保存路径</span></span><br><span class="line">      <span class="comment">// 1.1 这里以日期为基准，将文件按日期存放在不同的文件夹下，方便以后的管理</span></span><br><span class="line">      String format = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">      String realPath = StringUtils.join(baseFolder, format);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 判断路径是否存在，不存在则先创建相应的文件夹</span></span><br><span class="line">      File folder = <span class="keyword">new</span> File(realPath);</span><br><span class="line">      <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">        folder.mkdirs();</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 3. 为文件生成一个系统中可以唯一识别的文件名</span></span><br><span class="line">      <span class="comment">// 3.1 先获取文件类型的后缀名</span></span><br><span class="line">      String oldName = file.getOriginalFilename();</span><br><span class="line">      <span class="comment">// 3.2 生成文件名</span></span><br><span class="line">      String newName = UUID.randomUUID().toString() + <span class="string">"."</span> + StringUtils.substringAfterLast(oldName, <span class="string">"."</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 4. 保存文件到系统指定文件夹下</span></span><br><span class="line">      file.transferTo(<span class="keyword">new</span> File(folder, newName));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 5. 返回文件名</span></span><br><span class="line">      <span class="keyword">return</span> StringUtils.join(format, <span class="string">"/"</span>, newName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(ResponseEntity.ResponseCode.ERROR.getCode(), e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的注释其实已经讲得比较清楚了。</p><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/resource/sys-resource"</span>)</span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"/resource/sys-resource"</span>, tags = <span class="string">"系统资源"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysResourceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;resources.basePath&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String baseDir;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/file/download"</span>)</span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"下载文件"</span>, notes = <span class="string">"文件"</span>, httpMethod = <span class="string">"GET"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportUserInfo</span><span class="params">(String fileName, HttpServletResponse response)</span> <span class="keyword">throws</span> BaseException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件保存路径</span></span><br><span class="line">    String realPath = StringUtils.join(baseDir, fileName);</span><br><span class="line">    <span class="comment">// 判断文件是否存在，不存在则返回下载失败</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists() || !file.isFile()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(ResponseEntity.ResponseCode.ERROR.getCode(), <span class="string">"文件不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件内容，并返回文件供用户下载</span></span><br><span class="line">    <span class="keyword">try</span> (InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">         BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(inputStream)) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="keyword">int</span> i = bis.read(buffer);</span><br><span class="line">      OutputStream outputStream = response.getOutputStream();</span><br><span class="line">      <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">        outputStream.write(buffer, <span class="number">0</span>, i);</span><br><span class="line">        i = bis.read(buffer);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BaseException(ResponseEntity.ResponseCode.ERROR.getCode(), e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里使用 <code>Postman</code> 对接口进行测试。首先，测试文件上传功能：</p><p><img src="hexo_post_1.png" alt="测试文件上传"></p><p>接着，测试文件下载功能：</p><p><img src="hexo_post_2.png" alt="测试文件下载"></p><p><strong>这里需要注意的是</strong>：发送请求的按钮需要选择 <code>Send and Download</code> 按钮才能下载成功。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate-validator 使用</title>
      <link href="/2020/04/05/hibernate-validator/"/>
      <url>/2020/04/05/hibernate-validator/</url>
      
        <content type="html"><![CDATA[<h2 id="hibernate-validator-是什么"><a href="#hibernate-validator-是什么" class="headerlink" title="hibernate-validator 是什么"></a>hibernate-validator 是什么</h2><p>hibernate-validator 提供了符合 JSR 303 规范中所有内置 constraint 的实现，为 JavaBean 验证定义了相应的元数据模型和 API。简单地理解，使用 hibernate-validator 可以在项目中优雅地实现参数校验，并重用校验规则。</p><h2 id="使用-hibernate-validator"><a href="#使用-hibernate-validator" class="headerlink" title="使用 hibernate-validator"></a>使用 hibernate-validator</h2><h3 id="环境要求："><a href="#环境要求：" class="headerlink" title="环境要求："></a>环境要求：</h3><ul><li>最新版本的 hibernate-validator 要求 JDK &gt;= 8</li></ul><h3 id="Maven-引入（非-Spring-Boot-项目）："><a href="#Maven-引入（非-Spring-Boot-项目）：" class="headerlink" title="Maven 引入（非 Spring Boot 项目）："></a>Maven 引入（非 Spring Boot 项目）：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-项目："><a href="#Spring-Boot-项目：" class="headerlink" title="Spring Boot 项目："></a>Spring Boot 项目：</h3><p>默认情况下，<code>spring-boot-starter-web</code> 中已包含 <code>hibernate-validator</code> 依赖，所以只需要引入 <code>spring-boot-starter-web</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="hibernate-validator-常用注解"><a href="#hibernate-validator-常用注解" class="headerlink" title="hibernate-validator 常用注解"></a>hibernate-validator 常用注解</h2><p>hibernate-validator 包含以下常用注解：</p><table><thead><tr><th>序号</th><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><code>@NotNull</code></td><td>判断非 null，常用于判断装饰类/自定义类不为 null</td></tr><tr><td>2</td><td><code>@NotEmpty</code></td><td>判断非 null，并且长度大于1；常用于判断集合不能为空</td></tr><tr><td>3</td><td><code>@NotBlank</code></td><td>判断非 null，并且去除前后空格后长度大于1；常用于判断字符串不能为空</td></tr><tr><td>4</td><td><code>@Null</code></td><td>判断 null</td></tr><tr><td>5</td><td><code>@Length</code></td><td>限制字符串的长度，@Length(min=1, max=50) 限制字符串长度在 1~50 间</td></tr><tr><td>6</td><td><code>@Size</code></td><td>限制集合的大小，@Size(min=1) 限制集合至少包含一个元素</td></tr><tr><td>7</td><td><code>@Past</code></td><td>检验日期是否为过去的日期</td></tr><tr><td>8</td><td><code>@Future</code></td><td>校验日期是否为将来的日期</td></tr><tr><td>9</td><td><code>@Min</code></td><td>校验值是否大于等于给定的值</td></tr><tr><td>10</td><td><code>@Max</code></td><td>校验值是否小于等于给定的值</td></tr><tr><td>11</td><td><code>@Digits</code></td><td>限制值的整数位和小数位，@Digits(intege=2,fraction=4) 限制2位整数和4位小数</td></tr><tr><td>12</td><td><code>@DecimalMin</code></td><td>限制 Decimal 类型数据大于等于给定值</td></tr><tr><td>13</td><td><code>@DecimalMax</code></td><td>限制 Decimal 类型数据小于等于给定值</td></tr><tr><td>14</td><td><code>@AssertTrue</code></td><td>限制 boolean 类型的值为 true</td></tr><tr><td>15</td><td><code>@AssertFalse</code></td><td>限制 boolean 类型的值为 false</td></tr><tr><td>16</td><td><code>@Pattern</code></td><td>自定义正则表达式校验</td></tr><tr><td>17</td><td><code>@Valid</code></td><td>递归的对关联的对象进行校验</td></tr><tr><td></td><td><code>@ScriptAssert</code></td><td>自定义校验脚本校验，可用于二选一情况的校验</td></tr></tbody></table><h2 id="在SpringBoot中校验示例"><a href="#在SpringBoot中校验示例" class="headerlink" title="在SpringBoot中校验示例"></a>在SpringBoot中校验示例</h2><ol><li><p>对 SysUser Bean 进行校验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> len</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(callSuper = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@ApiModel</span>(value=<span class="string">"SysUser对象"</span>, description=<span class="string">"用户账号密码表"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户账号"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"账号不能为空"</span>)</span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">20</span>, message = <span class="string">"账号长度最多 20"</span>)</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"账号密码"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;8,16&#125;$"</span>, message = <span class="string">"密码必须含有数字和字母，且长度要在8-16位之间"</span>, groups = AddGroup<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">password</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"盐值"</span>)</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"账号状态"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"账号状态不能为空"</span>, groups = UpdateGroup<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">String</span> <span class="title">state</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户角色"</span>)</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"需要为用户分配至少一种角色"</span>)</span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SysRole&gt; sysRoles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>注：这里使用了分组校验，所有的校验都属于某个分组，默认情况下，没注明表示属于 <code>Default</code> 分组。这在某些情况下很有用，比如新增和更新时校验规则并不完全一样，这里新增时不需要校验用户状态，但更新是需要状态不为空。</p></li><li><p><code>AddGroup</code>，<code>UpdateGroup</code> 是自定义的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AddGroup</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UpdateGroup</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>在控制器中启动校验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> len</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">// 允许跨域</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/sys-user"</span>)</span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"/user/sys-user"</span>, tags = <span class="string">"用户控制器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"添加新用户"</span>, notes = <span class="string">"用户"</span>, httpMethod = <span class="string">"POST"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">createUser</span><span class="params">(@Validated(&#123;AddGroup.class, Default.class&#125;)</span> @RequestBody SysUser sysUser) <span class="keyword">throws</span> BaseException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseUtil.success(userInfoService.createUser(sysUserInfoDTO));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制器中指明，需要校验的对象，使用 <code>@Validated</code> 注解，并指定校验分组，这里指定应用 <code>AddGroup</code> 和 <code>Default</code> 两个分组的校验规则。</p></li><li><p>当校验不通过时会产生校验异常，可以在异常拦截接口处统一处理所有的校验异常，并包装成自定义的返回类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常控制器</span></span><br><span class="line"><span class="comment"> * Created by len on 2020-02-20 23:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * hibernate validator 数据绑定验证异常拦截</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(BindException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">bindExceptionHandle</span>(<span class="title">BindException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    ObjectError error = e.getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">    log.info(<span class="string">"数据验证异常：&#123;&#125;"</span>, error.getDefaultMessage());</span><br><span class="line">    <span class="keyword">return</span> ResponseUtil.error(error.getDefaultMessage(), ResponseEntity.ResponseCode.BAD_REQUEST);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * hibernate validator 数据绑定验证异常拦截</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">methodArgumentNotValidExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    ObjectError error = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">    log.info(<span class="string">"数据验证异常：&#123;&#125;"</span>, error.getDefaultMessage());</span><br><span class="line">    <span class="keyword">return</span> ResponseUtil.error(error.getDefaultMessage(), ResponseEntity.ResponseCode.BAD_REQUEST);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * spring validator 方法参数验证异常拦截</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(ConstraintViolationException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">constraintViolationExceptionHandler</span>(<span class="title">ConstraintViolationException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    Set&lt;ConstraintViolation&lt;?&gt;&gt; violations = e.getConstraintViolations();</span><br><span class="line">    ConstraintViolation&lt;?&gt; violation = violations.iterator().next();</span><br><span class="line">    log.info(<span class="string">"数据验证异常：&#123;&#125;"</span>, violation.getMessage());</span><br><span class="line">    <span class="keyword">return</span> ResponseUtil.error(violation.getMessage(), ResponseEntity.ResponseCode.BAD_REQUEST);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 自定义异常</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(BaseException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">systemExceptionHandler</span>(<span class="title">BaseException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    log.error(<span class="string">"The request occur errors.&#123;&#125;"</span>, e);</span><br><span class="line">    <span class="keyword">return</span> ResponseUtil.error(e.getErrMsg(), e.getErrCode());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">defaultExceptionHandler</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    log.error(<span class="string">"The request occur errors.&#123;&#125;"</span>, e);</span><br><span class="line">    <span class="keyword">return</span> ResponseUtil.error(e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成了对用户的校验。</p></li></ol><h2 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h2><p>有时候，hibernate-validator 提供的校验规则并不能满足我们，比如对枚举的校验。这是，我们可以自定义自己的校验注解。以校验枚举类型为例：</p><h4 id="创建校验注解类："><a href="#创建校验注解类：" class="headerlink" title="创建校验注解类："></a>创建校验注解类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by len on 2020-02-29 10:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.ANNOTATION_TYPE, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Repeatable</span>(Enum.List<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Constraint</span>(<span class="title">validatedBy</span> </span>= &#123; EnumValidator<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">Enum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "Enum is out of scope"</span>;</span><br><span class="line"></span><br><span class="line">  Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * the enum's class-type</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Class</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Class&lt;?&gt; clazz();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * the method's name, which used to validate the enum's value</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> method's name</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">String <span class="title">method</span><span class="params">()</span> <span class="keyword">default</span> "ordinal"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Documented</span></span><br><span class="line">  <span class="meta">@Target</span>(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line">  <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">  <span class="meta">@interface</span> List &#123;</span><br><span class="line">    Enum[] value();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过 <code>@Target</code> 指明注解可以应用的类型，比如 <code>ElementType.FIELD</code> 表示注解可以应用在字段上。<code>@Constraint</code> 指明校验器，这里为 <code>EnumValidator</code> 类，具体实现参考下文。</p><p><code>Enum</code> 类中的 <code>Class&lt;?&gt; clazz();</code> 由使用者提供枚举的 class 对象，<code>String method() default &quot;ordinal&quot;;</code> 指明枚举进行校验的方法名，默认根据枚举 <code>oridinal</code> 进行校验。</p><h4 id="实现-ConstraintValidator-接口，实现具体的校验规则："><a href="#实现-ConstraintValidator-接口，实现具体的校验规则：" class="headerlink" title="实现 ConstraintValidator 接口，实现具体的校验规则："></a>实现 ConstraintValidator 接口，实现具体的校验规则：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by len on 2020-02-29 10:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">Enum</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Enum annotation;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Enum constraintAnnotation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.annotation = constraintAnnotation;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Object value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object[] objects = annotation.clazz().getEnumConstants();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Method method = annotation.clazz().getMethod(annotation.method());</span><br><span class="line">      <span class="keyword">for</span> (Object o : objects) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.equals(method.invoke(o))) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过实现 <code>ConstraintValidator</code> 中的 <code>isValid</code> 方法，返回 true 表示校验通过，false 表示校验失败，并触发校验异常。</p><h4 id="使用-Enum-校验枚举"><a href="#使用-Enum-校验枚举" class="headerlink" title="使用 @Enum 校验枚举"></a>使用 @Enum 校验枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"性别码"</span>, required = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@NotNull</span>(message = <span class="string">"性别不能为空"</span>)</span><br><span class="line"><span class="meta">@Enum</span>(method = <span class="string">"getCode"</span>, clazz = SysUserEnum.Sex<span class="class">.<span class="keyword">class</span>, <span class="title">message</span> </span>= <span class="string">"性别状态码错误"</span>)</span><br><span class="line"><span class="meta">@ExcelIgnore</span></span><br><span class="line"><span class="keyword">private</span> Integer sexCode;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Getter</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> Sex &#123;</span><br><span class="line">    MALE(<span class="number">0</span>, <span class="string">"男"</span>), FEMALE(<span class="number">1</span>, <span class="string">"女"</span>), UNKNOWN(<span class="number">2</span>, <span class="string">"未知"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    Sex(<span class="keyword">int</span> code, String desc) &#123;</span><br><span class="line">      <span class="keyword">this</span>.code = code;</span><br><span class="line">      <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊场景"><a href="#特殊场景" class="headerlink" title="特殊场景"></a>特殊场景</h2><p>在实际使用中，发现有一种业务场景需要对两个字段进行二选一校验，即只需要其中一个字段的值不为空的情况，这时候可以使用 <code>@ScriptAssert</code> 注解实现。比如，有一个场景，采购单有商品名和商品照片两个字段，这两个字段值不能同时为空，可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ScriptAssert</span>(lang = <span class="string">"javascript"</span>, script = <span class="string">"(itemName != null &amp;&amp; itemName.trim() != '') OR (itemPicture != null &amp;&amp; itemPicture.trim() != '') "</span>, message = <span class="string">"商品名和商品照片不能同时为空"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TradeOrderItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String itemName;</span><br><span class="line">    <span class="keyword">private</span> String itemPicture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 校验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
